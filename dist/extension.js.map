{"version":3,"file":"extension.js","mappings":"uuBAsGI,EAAAA,aAAAA,EACA,EAAAC,eAxEJ,WACIC,EAAOC,OAAOC,uBAAuB,EAAAC,KAAKC,WAAY,CAAEC,MAAO,EAAAF,KAAKG,cAAeC,KAAKT,EAC5F,EAuEI,EAAAU,iBA1DJ,WACIR,EAAOC,OAAOC,uBAAuB,EAAAC,KAAKC,WAAY,CAAEC,MAAO,EAAAF,KAAKG,cAAeC,KAAKT,EAC5F,EAyDI,EAAAW,oBAtBJ,WACI,MAAM,UAAEC,GAAcC,IAEtB,MAAO,GADW,EAAAC,WAAWF,IAEjC,EAmBI,EAAAG,wBAXJ,WACI,MAAMC,EAASd,EAAOe,UAAUC,iBAAiB,kBACjDF,EAAOG,OAAO,EAAAC,iBAAiBC,aAAaC,IAAK,EAAAF,iBAAiBC,aAAaE,SAAS,GACxFP,EAAOG,OAAO,EAAAC,iBAAiBI,UAAUF,IAAK,EAAAF,iBAAiBI,UAAUD,SAAS,EACtF,EAQI,EAAAE,yBAtFJ,WACIvB,EAAOC,OAAOC,uBAAuB,EAAAC,KAAKC,WAAY,CAAEC,MAAO,EAAAF,KAAKqB,cACxE,EAqFI,EAAAC,2BAvCJ,WACI,MAAM,aAAEC,GAAiBf,IACzB,MAAO,sEAEuCe,qBAGlD,EA5EA,kBACA,SAMA,SAAS5B,IACLE,EAAO2B,SAASC,eAAe,gCACnC,CA6CA,SAASjB,IACL,MAAMG,EAASd,EAAOe,UAAUC,iBAAiB,kBAGjD,MAAO,CACHU,aAHiBZ,EAAOe,IAAI,EAAAX,iBAAiBC,aAAaC,KAI1DV,UAHcI,EAAOe,IAAI,EAAAX,iBAAiBI,UAAUF,KAK5D,C,sLCwES,EAAAjB,KArII,CACTC,WAAY,sBACZE,YAAa,UACbkB,aAAc,gBACdM,UAAW,UAiIA,EAAAC,SA7HE,CACbC,OAAQ,wBACRC,QAAS,yBACTC,MAAO,wBAIX,MAAMC,EAAqB,yBAsH0C,EAAAA,mBAAAA,EAnHrE,MAAMC,EAAe,CACjBC,UAAW,qBACXC,gBAAiBH,EAAqB,sBAiHL,EAAAC,aAAAA,EAAc,EAAAlB,iBA7G1B,CACrBC,aAAc,CACVC,IAAK,eACLC,QAAS,WAEbC,UAAW,CACPF,IAAK,YACLC,QAAS,QAsGQ,EAAAT,WAjGN,CACf2B,IAAK,GACLC,KAAM,qlBA+F+E,EAAAC,wBA1EzD,ykD,+sBC9ChC,oBAAyBC,GAOrB,MAAMV,EAAShC,EAAO2B,SAASgB,gBAAgB,EAAAZ,SAASC,QAAQY,UAC5D,IAEI,MAAMC,QAAoB,IAAAC,iCAEpB,cAAEC,SAAwB,IAAAC,gCAG1BC,GAAW,IAAAC,eAAcH,EAAyBF,SAEtB,IAAAP,0BAIxB,IAAAa,YAAU,IAAAC,oBAAmB,EAAAhB,aAAaC,WAAYY,IAE5D,IAAAlD,oBAGA,IAAAwB,2BAER,CAAE,MAAO8B,GACLrD,EAAOC,OAAOqD,iBAAiB,EAAAnD,KAAK2B,UACxC,KAMEG,EAAUjC,EAAO2B,SAASgB,gBAAgB,EAAAZ,SAASE,SAASW,UAC9D,IAEI,MAAM,oBAAEW,SAA8B,IAAAC,gCAEhC,IAAAL,YAAU,IAAAC,oBAAmB,EAAAhB,aAAaC,WAAYkB,SAEtD,IAAAE,8BAEN,IAAA5C,4BAEA,IAAAd,iBACJ,CAAE,MAAOsD,GACLrD,EAAOC,OAAOqD,iBAAiB,EAAAnD,KAAK2B,UACxC,KAGE4B,EAAQ1D,EAAO2B,SAASgB,gBAAgB,EAAAZ,SAASG,OAAOU,UAC1D,UAEU,IAAAO,YAAU,IAAAC,oBAAmB,EAAAhB,aAAaC,WAAY,EAAAI,0BAE5D,IAAAgB,8BAEA,IAAA5C,4BAEA,IAAAL,mBACJ,CAAE,MAAO6C,GACLrD,EAAOC,OAAOqD,iBAAiB,EAAAnD,KAAK2B,UACxC,KAGJY,EAAQiB,cAAcC,KAAK5B,GAC3BU,EAAQiB,cAAcC,KAAK3B,GAC3BS,EAAQiB,cAAcC,KAAKF,EAC/B,EAEA,wBAA8B,EAvF9B,kBACA,SACA,SAUA,Q,+sBC8JI,EAAAP,UATJP,eAAyBiB,EAAuBZ,GAK5C,aAJMa,EAAGX,UAAUU,EAAeZ,EAAU,QAAQc,OAAOC,IACvDhE,EAAOC,OAAOqD,iBAAiBU,EAAI,KAGhC,CACX,EAII,EAAAd,cAzGJ,SAAuBH,EAAuBkB,GAC1C,MAAMC,GAAU,IAAAzC,8BACV0C,GAAc,IAAA1D,uBACpB,OAAOsC,GAAeqB,QAAQ,aAAc,YAAYF,KAAWD,KAAWE,qBAClF,EAsGI,EAAA7B,gBA9DJM,iBACI,MAAMP,EAAYe,EAAmB,EAAAhB,aAAaC,WAC5CgC,EAAkBjB,EAAmB,EAAAhB,aAAaE,iBAExD,aApCJM,eAAuC0B,GACnC,IAEI,aADMR,EAAGS,OAAOD,IACT,CACX,CAAE,MAAOjB,GACL,OAAO,CACX,CACJ,CA6BcmB,CAAwBH,WAjBtCzB,eAA0B6B,EAAaC,GAInC,aAHMZ,EAAGa,SAASF,EAAKC,GAAQX,OAAOC,IAClChE,EAAOC,OAAOqD,iBAAiB,WAAWU,IAAM,KAE7C,CACX,CAaUY,CAAWvC,EAAWgC,IACrB,EACX,EAwDI,EAAAjB,mBAAAA,EACA,EAAAI,uBA/CJZ,iBACI,MAAMiC,EAAsBzB,EAAmB,EAAAhB,aAAaE,iBAM5D,MAAO,CACHiB,0BAL8BO,EAAGgB,SAASD,EAAqB,QAAQd,OAAOC,IAC9EhE,EAAOC,OAAOqD,iBAAiBU,EAAI,IAM3C,EAsCI,EAAAP,0BA5BJb,iBAII,aAHMkB,EAAGiB,OAAO3B,EAAmB,EAAAhB,aAAaE,kBAAkByB,OAAOC,IACrEhE,EAAOC,OAAOqD,iBAAiBU,EAAI,KAEhC,CACX,EAwBI,EAAAlB,6BArKJF,iBACI,MAAMoC,EAAOC,UAAY,aAKzB,aAJmBnB,EAAGgB,SAASE,EAAM,QAAQjB,OAAOC,IAChDhE,EAAOC,OAAOqD,iBAAiBU,EAAI,GAI3C,EA+JI,EAAAhB,6BA9HJJ,iBACI,MAAMiB,EAAgBT,EAAmB,EAAAhB,aAAaC,WAItD,MAAO,CAAEU,oBAHmBe,EAAGgB,SAASjB,EAAe,QAAQE,OAAOC,IAClEhE,EAAOC,OAAOqD,iBAAiBU,EAAI,IAG3C,EAzDA,kBACA,YACA,YACA,SACA,SA+BA,SAASZ,EAAmB8B,GACxB,MAAMC,EAAcH,EAAKI,QAVlBpF,EAAOqF,IAAIC,SAWZC,EAAkBP,EAAKQ,KAAKL,EAAa,MAAO,MAAO,KAAM,OAAQ,mBAAoB,aAEzFM,EAAoC,CACtC,CAAC,EAAArD,aAAaC,WAAY,EAAAD,aAAaC,UACvC,CAAC,EAAAD,aAAaE,iBAAkB,EAAAF,aAAaE,iBAEjD,OAAOmD,EAAUP,GAAYF,EAAKQ,KAAKD,EAAiBE,EAAUP,IAAaK,CACnF,C,UC5CAG,EAAOC,QAAUC,QAAQ,S,UCAzBF,EAAOC,QAAUC,QAAQ,c,UCAzBF,EAAOC,QAAUC,QAAQ,O,GCCrBC,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,CAAC,GAOX,OAHAQ,EAAoBH,GAAUI,KAAKV,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,OACf,CCnB0BI,CAAoB,K","sources":["webpack://easy-anim-code/./src/common/index.ts","webpack://easy-anim-code/./src/enum/tip.ts","webpack://easy-anim-code/./src/extension.ts","webpack://easy-anim-code/./src/file/index.ts","webpack://easy-anim-code/external commonjs \"vscode\"","webpack://easy-anim-code/external node-commonjs \"fs/promises\"","webpack://easy-anim-code/external node-commonjs \"path\"","webpack://easy-anim-code/webpack/bootstrap","webpack://easy-anim-code/webpack/startup"],"sourcesContent":["import * as vscode from 'vscode'\nimport { TIPS, EXTENSION_CONFIG, ANIM_LEVEL } from '../enum/tip'\n\n/**\n * 重新加载当前窗口\n * 这个函数执行一个命令来重新加载 VS Code 窗口\n */\nfunction reloadWindow() {\n    vscode.commands.executeCommand('workbench.action.reloadWindow')\n}\n\n/**\n * 显示一个信息通知，提示用户当前的备份状态\n *\n * @remarks\n * 这个函数会调用 vscode.window.showInformationMessage 方法来显示一个信息通知\n * 通知的内容是 TIPS.enableText，标题是 TIPS.isBackUpText\n *\n * @param {void} - 这个函数不接受任何参数\n * @returns {void} - 这个函数不返回任何值\n */\nfunction showIsBackUpNotification() {\n    vscode.window.showInformationMessage(TIPS.enableText, { title: TIPS.isBackUpText })\n}\n\n/**\n * 启用重启功能\n * 这个函数会显示一个信息消息，提示用户需要重启应用以使更改生效，然后执行重启操作\n * @param {string} TIPS.enableText - 显示给用户的提示信息\n * @param {string} TIPS.restartText - 重启操作的标题\n */\nfunction enabledRestart() {\n    vscode.window.showInformationMessage(TIPS.enableText, { title: TIPS.restartText }).then(reloadWindow)\n}\n\n/**\n * 显示卸载成功的提示信息，并在用户确认后重新加载窗口\n *\n * @remarks\n * 这个函数用于在插件卸载成功后，向用户显示一条信息提示，并提供一个选项让用户重新加载窗口。\n *\n * @param {string} TIPS.enableText - 要显示的提示信息文本。\n * @param {string} TIPS.restartText - 重新加载窗口的按钮标题。\n *\n * @returns {Promise<void>} - 当用户点击重新加载窗口的按钮时，返回一个 Promise，表示窗口正在重新加载。\n */\nfunction unInstallSuccess() {\n    vscode.window.showInformationMessage(TIPS.enableText, { title: TIPS.restartText }).then(reloadWindow)\n}\n\n/**\n * 获取 Easy Anim Code 扩展的配置\n * @returns 包含 primaryColor 和 animLevel 的对象\n */\nfunction getEasyAnimCodeConfig() {\n    const config = vscode.workspace.getConfiguration('easy-anim-code')\n    const primaryColor = config.get(EXTENSION_CONFIG.PrimaryColor.key)\n    const animLevel = config.get(EXTENSION_CONFIG.AnimLevel.key)\n    return {\n        primaryColor,\n        animLevel,\n    }\n}\n\n/**\n * 创建一个根元素的样式模板，该模板定义了一个名为 --vscode-style-easy-anim-red-color 的 CSS 变量，其值为从配置中获取的 primaryColor。\n *\n * @returns 一个包含定义了 CSS 变量的字符串的模板。\n */\nfunction createRootValStyleTemplate() {\n    const { primaryColor } = getEasyAnimCodeConfig()\n    return `\n        :root {\n            --vscode-style-easy-anim-red-color: ${primaryColor};\n        }\n    `\n}\n\n/**\n * 根据配置获取高级动画级别。\n *\n * @returns 一个字符串，表示高级动画级别。\n */\nfunction createHighAnimLevel() {\n    const { animLevel } = getEasyAnimCodeConfig()\n    const highLevel = ANIM_LEVEL[animLevel as keyof typeof ANIM_LEVEL]\n    return `${highLevel}`\n}\n\n/**\n * 重置 Easy Anim Code 扩展的配置为默认值。\n *\n * 此函数用于将 Easy Anim Code 扩展的配置重置为其默认值。\n * 它会更新 primaryColor 和 animLevel 配置项为其默认值。\n */\nfunction resetEasyAnimCodeConfig() {\n    const config = vscode.workspace.getConfiguration('easy-anim-code')\n    config.update(EXTENSION_CONFIG.PrimaryColor.key, EXTENSION_CONFIG.PrimaryColor.default, true)\n    config.update(EXTENSION_CONFIG.AnimLevel.key, EXTENSION_CONFIG.AnimLevel.default, true)\n}\n\nexport {\n    reloadWindow,\n    enabledRestart,\n    unInstallSuccess,\n    createHighAnimLevel,\n    resetEasyAnimCodeConfig,\n    showIsBackUpNotification,\n    createRootValStyleTemplate,\n}\n","// 消息弹窗的文字枚举\r\nconst TIPS = {\r\n    enableText: '来自easy-anim-code的提示',\r\n    restartText: 'restart',\r\n    isBackUpText: '插件已执行过，本次中止执行',\r\n    errorText: '执行出现异常',\r\n}\r\n\r\n// 命令枚举\r\nconst COMMANDS = {\r\n    enable: 'easy-anim-code.enable',\r\n    disable: 'easy-anim-code.disable',\r\n    reset: 'easy-anim-code.reset',\r\n}\r\n\r\n// 备份文件的后缀\r\nconst BACKUP_FILE_SUFFIX = 'easy-anim-code-backup-'\r\n\r\n// 主文件枚举\r\nconst PRIMARY_FILE = {\r\n    workbench: 'workbench.esm.html',\r\n    backupWorkbench: BACKUP_FILE_SUFFIX + 'workbench.esm.html',\r\n}\r\n\r\n// 扩展配置枚举\r\nconst EXTENSION_CONFIG = {\r\n    PrimaryColor: {\r\n        key: 'PrimaryColor',\r\n        default: '#2aaaff',\r\n    },\r\n    AnimLevel: {\r\n        key: 'AnimLevel',\r\n        default: 'low',\r\n    },\r\n}\r\n\r\n// 动画等级枚举\r\nconst ANIM_LEVEL = {\r\n    low: ``,\r\n    high: `.part.sidebar.pane-composite-part {\r\n\t     .pane-body {\r\n            .monaco-list-row {\r\n                .monaco-tl-row {\r\n                    .monaco-tl-twistie {\r\n                        transition: width 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);\r\n                    }\r\n                    animation: easy-anim-opacity-animation-low-opacity 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);\r\n                }\r\n            }\r\n\r\n            .monaco-tree-sticky-container {\r\n                .monaco-tl-row {\r\n                    animation: none;\r\n                }\r\n            }\r\n        }\r\n\t\t}`,\r\n}\r\n\r\n// 主文件原始备份模板\r\nconst WORKBENCH_HTML_TEMPLATE = `<!-- Copyright (C) Microsoft Corporation. All rights reserved. -->\r\n<!DOCTYPE html>\r\n<html>\r\n\t<head>\r\n\t\t<meta charset=\"utf-8\" />\r\n\t\t<meta\r\n\t\t\thttp-equiv=\"Content-Security-Policy\"\r\n\t\t\tcontent=\"\r\n\t\t\t\tdefault-src\r\n\t\t\t\t\t'none'\r\n\t\t\t\t;\r\n\t\t\t\timg-src\r\n\t\t\t\t\t'self'\r\n\t\t\t\t\tdata:\r\n\t\t\t\t\tblob:\r\n\t\t\t\t\tvscode-remote-resource:\r\n\t\t\t\t\tvscode-managed-remote-resource:\r\n\t\t\t\t\thttps:\r\n\t\t\t\t;\r\n\t\t\t\tmedia-src\r\n\t\t\t\t\t'self'\r\n\t\t\t\t;\r\n\t\t\t\tframe-src\r\n\t\t\t\t\t'self'\r\n\t\t\t\t\tvscode-webview:\r\n\t\t\t\t;\r\n\t\t\t\tscript-src\r\n\t\t\t\t\t'self'\r\n\t\t\t\t\t'unsafe-eval'\r\n\t\t\t\t\tblob:\r\n\t\t\t\t;\r\n\t\t\t\tstyle-src\r\n\t\t\t\t\t'self'\r\n\t\t\t\t\t'unsafe-inline'\r\n\t\t\t\t;\r\n\t\t\t\tconnect-src\r\n\t\t\t\t\t'self'\r\n\t\t\t\t\thttps:\r\n\t\t\t\t\tws:\r\n\t\t\t\t;\r\n\t\t\t\tfont-src\r\n\t\t\t\t\t'self'\r\n\t\t\t\t\tvscode-remote-resource:\r\n\t\t\t\t\tvscode-managed-remote-resource:\r\n\t\t\t\t\thttps://*.vscode-unpkg.net\r\n\t\t\t\t;\r\n\t\t\t\trequire-trusted-types-for\r\n\t\t\t\t\t'script'\r\n\t\t\t\t;\r\n\t\t\t\ttrusted-types\r\n\t\t\t\t\tamdLoader\r\n\t\t\t\t\tcellRendererEditorText\r\n\t\t\t\t\tdefaultWorkerFactory\r\n\t\t\t\t\tdiffEditorWidget\r\n\t\t\t\t\tdiffReview\r\n\t\t\t\t\tdomLineBreaksComputer\r\n\t\t\t\t\tdompurify\r\n\t\t\t\t\teditorGhostText\r\n\t\t\t\t\teditorViewLayer\r\n\t\t\t\t\tnotebookRenderer\r\n\t\t\t\t\tstickyScrollViewLayer\r\n\t\t\t\t\ttokenizeToString\r\n\t\t\t\t;\r\n\t\t\"/>\r\n\t</head>\r\n\r\n\t<body aria-label=\"\">\r\n\t</body>\r\n\r\n\t<!-- Startup (do not modify order of script tags!) -->\r\n\t<script src=\"./workbench.js\" type=\"module\"></script>\r\n</html>\r\n`\r\n\r\nexport { TIPS, COMMANDS, ANIM_LEVEL, PRIMARY_FILE, EXTENSION_CONFIG, BACKUP_FILE_SUFFIX, WORKBENCH_HTML_TEMPLATE }\r\n","import * as vscode from 'vscode'\r\nimport { enabledRestart, resetEasyAnimCodeConfig, showIsBackUpNotification, unInstallSuccess } from './common/index'\r\nimport {\r\n    getEasyAnimCodeExtensionsCss,\r\n    getVSCodeWorkbenchFolderPath,\r\n    getResultHtml,\r\n    writeFile,\r\n    backupWorkbench,\r\n    getBackupWorkbenchFile,\r\n    removeBackUpWorkBenchFile,\r\n    getPrimaryFilePath,\r\n} from './file/index'\r\nimport { COMMANDS, PRIMARY_FILE, TIPS, WORKBENCH_HTML_TEMPLATE } from './enum/tip'\r\n\r\nexport function activate(context: vscode.ExtensionContext) {\r\n    // 1. 拿到自带的css\r\n    // 2. 获取要注入的文件\r\n    // 3. 注入文件\r\n    // 4. 备份文件\r\n    // 5. 重启\r\n    // 6. 卸载恢复文件\r\n    const enable = vscode.commands.registerCommand(COMMANDS.enable, async () => {\r\n        try {\r\n            // 1. 从扩展包中提取 CSS 样式用于注入 VSCode 核心 HTML 文件\r\n            const cssFileText = await getEasyAnimCodeExtensionsCss()\r\n            // 2. 获取要注入的文件\r\n            const { workbenchText } = await getVSCodeWorkbenchFolderPath()\r\n            // 3. 组合最终要注入的html文件\r\n            // vscode中有workbench和workbench-apc-extension两个html文件，可能在新版本的vscode中，只修改前者无效，会被后者html的加载覆盖，所以需要修改两个文件\r\n            const htmlText = getResultHtml(workbenchText as string, cssFileText as string)\r\n            // 4. 备份文件\r\n            const isWorkbenchBackedUp = await backupWorkbench()\r\n            // 检测是否已经执行过覆盖\r\n            if (isWorkbenchBackedUp) {\r\n                // 5. 写入文件\r\n                await writeFile(getPrimaryFilePath(PRIMARY_FILE.workbench), htmlText as string)\r\n                // 6. 弹出提示框，手动重启\r\n                enabledRestart()\r\n            } else {\r\n                // 6. 弹出提示框，已经执行过覆盖\r\n                showIsBackUpNotification()\r\n            }\r\n        } catch (error) {\r\n            vscode.window.showErrorMessage(TIPS.errorText)\r\n        }\r\n    })\r\n\r\n    // 1. 拿到备份的文件\r\n    // 2. 恢复文件\r\n    // 3. 重启\r\n    const disable = vscode.commands.registerCommand(COMMANDS.disable, async () => {\r\n        try {\r\n            // 1. 获取备份文件内容\r\n            const { backupWorkbenchText } = await getBackupWorkbenchFile()\r\n            // 2. 恢复文件\r\n            await writeFile(getPrimaryFilePath(PRIMARY_FILE.workbench), backupWorkbenchText as string)\r\n            // 3. 删除备份文件\r\n            await removeBackUpWorkBenchFile()\r\n            // 4. 还原插件配置参数\r\n            resetEasyAnimCodeConfig()\r\n            // 5. 弹出提示框，手动重启\r\n            enabledRestart()\r\n        } catch (error) {\r\n            vscode.window.showErrorMessage(TIPS.errorText)\r\n        }\r\n    })\r\n\r\n    const clear = vscode.commands.registerCommand(COMMANDS.reset, async () => {\r\n        try {\r\n            // 1. 写入template到核心文件中\r\n            await writeFile(getPrimaryFilePath(PRIMARY_FILE.workbench), WORKBENCH_HTML_TEMPLATE)\r\n            // 2. 删除备份文件\r\n            removeBackUpWorkBenchFile()\r\n            // 3. 还原插件配置参数\r\n            resetEasyAnimCodeConfig()\r\n            // 4. 重启\r\n            unInstallSuccess()\r\n        } catch (error) {\r\n            vscode.window.showErrorMessage(TIPS.errorText)\r\n        }\r\n    })\r\n\r\n    context.subscriptions.push(enable)\r\n    context.subscriptions.push(disable)\r\n    context.subscriptions.push(clear)\r\n}\r\n\r\nexport function deactivate() {}\r\n","import * as path from 'path'\r\nimport * as vscode from 'vscode'\r\nimport * as fs from 'fs/promises'\r\nimport { PRIMARY_FILE } from '../enum/tip'\r\nimport { createHighAnimLevel, createRootValStyleTemplate } from '../common'\r\n\r\n/**\r\n * 异步获取 Easy Anim Code 扩展的 CSS 文件内容\r\n *\r\n * @returns {string} 一个 Promise，成功时解析为包含 CSS 文件内容的字符串\r\n */\r\nasync function getEasyAnimCodeExtensionsCss() {\r\n    const path = __dirname + '/index.css'\r\n    const text = await fs.readFile(path, 'utf8').catch((err) => {\r\n        vscode.window.showErrorMessage(err)\r\n    })\r\n\r\n    return text\r\n}\r\n\r\n/**\r\n * 异步获取 VS Code 安装路径\r\n *\r\n * @returns {string} 一个 Promise，成功时解析为 VS Code 安装路径的字符串\r\n */\r\nfunction getVSCodeInstallPath(): string {\r\n    return vscode.env.appRoot\r\n}\r\n\r\n/**\r\n * 获取主文件路径\r\n * @since v10.0.0\r\n * @param fileName - 要获取路径的文件名\r\n * @returns 文件的完整路径，如果文件名不存在于记录中，则返回工作区文件夹路径\r\n */\r\nfunction getPrimaryFilePath(fileName: string) {\r\n    const installPath = path.dirname(getVSCodeInstallPath())\r\n    const workbenchFolder = path.join(installPath, 'app', 'out', 'vs', 'code', 'electron-sandbox', 'workbench')\r\n\r\n    const filePaths: Record<string, string> = {\r\n        [PRIMARY_FILE.workbench]: PRIMARY_FILE.workbench,\r\n        [PRIMARY_FILE.backupWorkbench]: PRIMARY_FILE.backupWorkbench,\r\n    }\r\n    return filePaths[fileName] ? path.join(workbenchFolder, filePaths[fileName]) : workbenchFolder\r\n}\r\n\r\n/**\r\n * 获取 VSCode 工作区文件夹路径\r\n * @since v10.0.0\r\n * @returns 包含工作区文件和工作区 APC 扩展文件内容的对象\r\n */\r\nasync function getVSCodeWorkbenchFolderPath() {\r\n    const workbenchPath = getPrimaryFilePath(PRIMARY_FILE.workbench)\r\n    const workbenchText = await fs.readFile(workbenchPath, 'utf8').catch((err) => {\r\n        vscode.window.showErrorMessage(err)\r\n    })\r\n    return { workbenchText }\r\n}\r\n\r\n/**\r\n * 将 CSS 文本嵌入到 workbenchText 的 </head> 标签之前，生成新的 HTML 文本\r\n *\r\n * @param {string} workbenchText - 原始的 HTML 文本\r\n * @param {string} cssText - 要嵌入的 CSS 文本\r\n * @returns {string} - 新的 HTML 文本，其中包含了嵌入的 CSS 样式\r\n */\r\nfunction getResultHtml(workbenchText: string, cssText: string) {\r\n    const rootVal = createRootValStyleTemplate()\r\n    const isHighLevel = createHighAnimLevel()\r\n    return workbenchText?.replace(/(<\\/head>)/, `\\n<style>${rootVal} ${cssText} ${isHighLevel}</style>\\n</head>`)\r\n}\r\n\r\n/**\r\n * 检查备份文件是否存在\r\n * @since v10.0.0\r\n * @param filePath - 要检查的文件路径\r\n * @returns 如果文件存在，返回 true，否则返回 false\r\n */\r\nasync function checkIfBackupFileExists(filePath: string) {\r\n    try {\r\n        await fs.access(filePath)\r\n        return true\r\n    } catch (error) {\r\n        return false\r\n    }\r\n}\r\n\r\n/**\r\n * 备份文件函数。\r\n * 这个函数尝试将文件从源路径复制到目标路径。\r\n * 如果复制成功，函数将不会返回任何内容。\r\n * 如果复制失败，函数将显示一个错误消息。\r\n *\r\n * @param src - 源文件的路径。\r\n * @param source - 目标文件的路径。\r\n * @returns 如果文件复制成功，返回 undefined。如果文件复制失败，返回错误对象。\r\n */\r\nasync function backupFile(src: string, source: string) {\r\n    await fs.copyFile(src, source).catch((err) => {\r\n        vscode.window.showErrorMessage(`备份文件失败: ${err}`)\r\n    })\r\n    return true\r\n}\r\n\r\n/**\r\n * 备份当前工作区文件。\r\n * 如果备份文件已存在，则不进行备份。\r\n *\r\n * @returns {Promise<boolean>} 如果备份成功，返回 true；如果备份文件已存在，返回 false。\r\n */\r\nasync function backupWorkbench() {\r\n    const workbench = getPrimaryFilePath(PRIMARY_FILE.workbench)\r\n    const backUpWorkbench = getPrimaryFilePath(PRIMARY_FILE.backupWorkbench)\r\n\r\n    if (await checkIfBackupFileExists(backUpWorkbench)) return false\r\n    await backupFile(workbench, backUpWorkbench)\r\n    return true\r\n}\r\n\r\n/**\r\n * 获取备份的工作区文件和 APC 扩展文件的内容。\r\n * 这个函数会读取指定的备份文件路径，并返回文件的内容。\r\n * 如果文件读取失败，会显示错误信息。\r\n *\r\n * @returns {Promise<Object>} 包含备份工作区文件和 APC 扩展文件内容的对象。\r\n * @throws {Error} 如果读取文件时发生错误，会抛出错误并显示错误信息。\r\n */\r\nasync function getBackupWorkbenchFile() {\r\n    const backupWorkbenchPath = getPrimaryFilePath(PRIMARY_FILE.backupWorkbench)\r\n\r\n    const backupWorkbenchText = await fs.readFile(backupWorkbenchPath, 'utf8').catch((err) => {\r\n        vscode.window.showErrorMessage(err)\r\n    })\r\n\r\n    return {\r\n        backupWorkbenchText,\r\n    }\r\n}\r\n\r\n/**\r\n * 删除备份的工作区文件。\r\n * 这个函数会尝试删除指定的备份文件路径。\r\n * 如果文件删除成功，函数将不会返回任何内容。\r\n * 如果文件删除失败，函数将显示一个错误消息。\r\n *\r\n * @returns {Promise<void>} 如果文件删除成功，返回 undefined。如果文件删除失败，返回错误对象。\r\n */\r\nasync function removeBackUpWorkBenchFile() {\r\n    await fs.unlink(getPrimaryFilePath(PRIMARY_FILE.backupWorkbench)).catch((err) => {\r\n        vscode.window.showErrorMessage(err)\r\n    })\r\n    return true\r\n}\r\n\r\n/**\r\n * 将给定的 HTML 文本写入到指定的文件路径中\r\n *\r\n * @param {string} workbenchPath - 目标文件的路径\r\n * @param {string} htmlText - 要写入的 HTML 文本\r\n * @throws {Error} - 如果写入文件时发生错误，将显示错误消息\r\n */\r\nasync function writeFile(workbenchPath: string, htmlText: string) {\r\n    await fs.writeFile(workbenchPath, htmlText, 'utf8').catch((err) => {\r\n        vscode.window.showErrorMessage(err)\r\n    })\r\n\r\n    return true\r\n}\r\n\r\nexport {\r\n    writeFile,\r\n    getResultHtml,\r\n    backupWorkbench,\r\n    getPrimaryFilePath,\r\n    getBackupWorkbenchFile,\r\n    removeBackUpWorkBenchFile,\r\n    getEasyAnimCodeExtensionsCss,\r\n    getVSCodeWorkbenchFolderPath,\r\n}\r\n","module.exports = require(\"vscode\");","module.exports = require(\"fs/promises\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["reloadWindow","enabledRestart","vscode","window","showInformationMessage","TIPS","enableText","title","restartText","then","unInstallSuccess","createHighAnimLevel","animLevel","getEasyAnimCodeConfig","ANIM_LEVEL","resetEasyAnimCodeConfig","config","workspace","getConfiguration","update","EXTENSION_CONFIG","PrimaryColor","key","default","AnimLevel","showIsBackUpNotification","isBackUpText","createRootValStyleTemplate","primaryColor","commands","executeCommand","get","errorText","COMMANDS","enable","disable","reset","BACKUP_FILE_SUFFIX","PRIMARY_FILE","workbench","backupWorkbench","low","high","WORKBENCH_HTML_TEMPLATE","context","registerCommand","async","cssFileText","getEasyAnimCodeExtensionsCss","workbenchText","getVSCodeWorkbenchFolderPath","htmlText","getResultHtml","writeFile","getPrimaryFilePath","error","showErrorMessage","backupWorkbenchText","getBackupWorkbenchFile","removeBackUpWorkBenchFile","clear","subscriptions","push","workbenchPath","fs","catch","err","cssText","rootVal","isHighLevel","replace","backUpWorkbench","filePath","access","checkIfBackupFileExists","src","source","copyFile","backupFile","backupWorkbenchPath","readFile","unlink","path","__dirname","fileName","installPath","dirname","env","appRoot","workbenchFolder","join","filePaths","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}